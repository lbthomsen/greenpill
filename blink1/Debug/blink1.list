
blink1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001144  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08001250  08001250  00011250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001274  08001274  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001274  08001274  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001274  08001274  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001274  08001274  00011274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001278  08001278  00011278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800127c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08001288  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08001288  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002ed2  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000d45  00000000  00000000  00022f07  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000003d0  00000000  00000000  00023c50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000348  00000000  00000000  00024020  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000123b1  00000000  00000000  00024368  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000038f5  00000000  00000000  00036719  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00063c21  00000000  00000000  0003a00e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0009dc2f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d40  00000000  00000000  0009dcac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001238 	.word	0x08001238

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001238 	.word	0x08001238

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 f96a 	bl	8000428 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f80e 	bl	8000174 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f852 	bl	8000200 <MX_GPIO_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	// Toggle the LED
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800015c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000160:	4803      	ldr	r0, [pc, #12]	; (8000170 <main+0x24>)
 8000162:	f000 fc3b 	bl	80009dc <HAL_GPIO_TogglePin>

	// Wait for 100 ms
	HAL_Delay(100);
 8000166:	2064      	movs	r0, #100	; 0x64
 8000168:	f000 f9c0 	bl	80004ec <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800016c:	e7f6      	b.n	800015c <main+0x10>
 800016e:	bf00      	nop
 8000170:	40011000 	.word	0x40011000

08000174 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000174:	b580      	push	{r7, lr}
 8000176:	b090      	sub	sp, #64	; 0x40
 8000178:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800017a:	f107 0318 	add.w	r3, r7, #24
 800017e:	2228      	movs	r2, #40	; 0x28
 8000180:	2100      	movs	r1, #0
 8000182:	4618      	mov	r0, r3
 8000184:	f001 f850 	bl	8001228 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000188:	1d3b      	adds	r3, r7, #4
 800018a:	2200      	movs	r2, #0
 800018c:	601a      	str	r2, [r3, #0]
 800018e:	605a      	str	r2, [r3, #4]
 8000190:	609a      	str	r2, [r3, #8]
 8000192:	60da      	str	r2, [r3, #12]
 8000194:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000196:	2301      	movs	r3, #1
 8000198:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800019a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800019e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001a0:	2300      	movs	r3, #0
 80001a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001a4:	2301      	movs	r3, #1
 80001a6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001a8:	2302      	movs	r3, #2
 80001aa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001b2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001b8:	f107 0318 	add.w	r3, r7, #24
 80001bc:	4618      	mov	r0, r3
 80001be:	f000 fc25 	bl	8000a0c <HAL_RCC_OscConfig>
 80001c2:	4603      	mov	r3, r0
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d001      	beq.n	80001cc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80001c8:	f000 f872 	bl	80002b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001cc:	230f      	movs	r3, #15
 80001ce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001d0:	2302      	movs	r3, #2
 80001d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001d4:	2300      	movs	r3, #0
 80001d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001de:	2300      	movs	r3, #0
 80001e0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001e2:	1d3b      	adds	r3, r7, #4
 80001e4:	2102      	movs	r1, #2
 80001e6:	4618      	mov	r0, r3
 80001e8:	f000 fe90 	bl	8000f0c <HAL_RCC_ClockConfig>
 80001ec:	4603      	mov	r3, r0
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d001      	beq.n	80001f6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80001f2:	f000 f85d 	bl	80002b0 <Error_Handler>
  }
}
 80001f6:	bf00      	nop
 80001f8:	3740      	adds	r7, #64	; 0x40
 80001fa:	46bd      	mov	sp, r7
 80001fc:	bd80      	pop	{r7, pc}
	...

08000200 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b088      	sub	sp, #32
 8000204:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000206:	f107 0310 	add.w	r3, r7, #16
 800020a:	2200      	movs	r2, #0
 800020c:	601a      	str	r2, [r3, #0]
 800020e:	605a      	str	r2, [r3, #4]
 8000210:	609a      	str	r2, [r3, #8]
 8000212:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000214:	4b24      	ldr	r3, [pc, #144]	; (80002a8 <MX_GPIO_Init+0xa8>)
 8000216:	699b      	ldr	r3, [r3, #24]
 8000218:	4a23      	ldr	r2, [pc, #140]	; (80002a8 <MX_GPIO_Init+0xa8>)
 800021a:	f043 0310 	orr.w	r3, r3, #16
 800021e:	6193      	str	r3, [r2, #24]
 8000220:	4b21      	ldr	r3, [pc, #132]	; (80002a8 <MX_GPIO_Init+0xa8>)
 8000222:	699b      	ldr	r3, [r3, #24]
 8000224:	f003 0310 	and.w	r3, r3, #16
 8000228:	60fb      	str	r3, [r7, #12]
 800022a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800022c:	4b1e      	ldr	r3, [pc, #120]	; (80002a8 <MX_GPIO_Init+0xa8>)
 800022e:	699b      	ldr	r3, [r3, #24]
 8000230:	4a1d      	ldr	r2, [pc, #116]	; (80002a8 <MX_GPIO_Init+0xa8>)
 8000232:	f043 0320 	orr.w	r3, r3, #32
 8000236:	6193      	str	r3, [r2, #24]
 8000238:	4b1b      	ldr	r3, [pc, #108]	; (80002a8 <MX_GPIO_Init+0xa8>)
 800023a:	699b      	ldr	r3, [r3, #24]
 800023c:	f003 0320 	and.w	r3, r3, #32
 8000240:	60bb      	str	r3, [r7, #8]
 8000242:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000244:	4b18      	ldr	r3, [pc, #96]	; (80002a8 <MX_GPIO_Init+0xa8>)
 8000246:	699b      	ldr	r3, [r3, #24]
 8000248:	4a17      	ldr	r2, [pc, #92]	; (80002a8 <MX_GPIO_Init+0xa8>)
 800024a:	f043 0304 	orr.w	r3, r3, #4
 800024e:	6193      	str	r3, [r2, #24]
 8000250:	4b15      	ldr	r3, [pc, #84]	; (80002a8 <MX_GPIO_Init+0xa8>)
 8000252:	699b      	ldr	r3, [r3, #24]
 8000254:	f003 0304 	and.w	r3, r3, #4
 8000258:	607b      	str	r3, [r7, #4]
 800025a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800025c:	4b12      	ldr	r3, [pc, #72]	; (80002a8 <MX_GPIO_Init+0xa8>)
 800025e:	699b      	ldr	r3, [r3, #24]
 8000260:	4a11      	ldr	r2, [pc, #68]	; (80002a8 <MX_GPIO_Init+0xa8>)
 8000262:	f043 0308 	orr.w	r3, r3, #8
 8000266:	6193      	str	r3, [r2, #24]
 8000268:	4b0f      	ldr	r3, [pc, #60]	; (80002a8 <MX_GPIO_Init+0xa8>)
 800026a:	699b      	ldr	r3, [r3, #24]
 800026c:	f003 0308 	and.w	r3, r3, #8
 8000270:	603b      	str	r3, [r7, #0]
 8000272:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000274:	2200      	movs	r2, #0
 8000276:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800027a:	480c      	ldr	r0, [pc, #48]	; (80002ac <MX_GPIO_Init+0xac>)
 800027c:	f000 fb96 	bl	80009ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000280:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000284:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000286:	2301      	movs	r3, #1
 8000288:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800028a:	2300      	movs	r3, #0
 800028c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800028e:	2302      	movs	r3, #2
 8000290:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000292:	f107 0310 	add.w	r3, r7, #16
 8000296:	4619      	mov	r1, r3
 8000298:	4804      	ldr	r0, [pc, #16]	; (80002ac <MX_GPIO_Init+0xac>)
 800029a:	f000 fa2d 	bl	80006f8 <HAL_GPIO_Init>

}
 800029e:	bf00      	nop
 80002a0:	3720      	adds	r7, #32
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	40021000 	.word	0x40021000
 80002ac:	40011000 	.word	0x40011000

080002b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80002b4:	bf00      	nop
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bc80      	pop	{r7}
 80002ba:	4770      	bx	lr

080002bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002bc:	b480      	push	{r7}
 80002be:	b085      	sub	sp, #20
 80002c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80002c2:	4b15      	ldr	r3, [pc, #84]	; (8000318 <HAL_MspInit+0x5c>)
 80002c4:	699b      	ldr	r3, [r3, #24]
 80002c6:	4a14      	ldr	r2, [pc, #80]	; (8000318 <HAL_MspInit+0x5c>)
 80002c8:	f043 0301 	orr.w	r3, r3, #1
 80002cc:	6193      	str	r3, [r2, #24]
 80002ce:	4b12      	ldr	r3, [pc, #72]	; (8000318 <HAL_MspInit+0x5c>)
 80002d0:	699b      	ldr	r3, [r3, #24]
 80002d2:	f003 0301 	and.w	r3, r3, #1
 80002d6:	60bb      	str	r3, [r7, #8]
 80002d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80002da:	4b0f      	ldr	r3, [pc, #60]	; (8000318 <HAL_MspInit+0x5c>)
 80002dc:	69db      	ldr	r3, [r3, #28]
 80002de:	4a0e      	ldr	r2, [pc, #56]	; (8000318 <HAL_MspInit+0x5c>)
 80002e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002e4:	61d3      	str	r3, [r2, #28]
 80002e6:	4b0c      	ldr	r3, [pc, #48]	; (8000318 <HAL_MspInit+0x5c>)
 80002e8:	69db      	ldr	r3, [r3, #28]
 80002ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80002ee:	607b      	str	r3, [r7, #4]
 80002f0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80002f2:	4b0a      	ldr	r3, [pc, #40]	; (800031c <HAL_MspInit+0x60>)
 80002f4:	685b      	ldr	r3, [r3, #4]
 80002f6:	60fb      	str	r3, [r7, #12]
 80002f8:	68fb      	ldr	r3, [r7, #12]
 80002fa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80002fe:	60fb      	str	r3, [r7, #12]
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000306:	60fb      	str	r3, [r7, #12]
 8000308:	4a04      	ldr	r2, [pc, #16]	; (800031c <HAL_MspInit+0x60>)
 800030a:	68fb      	ldr	r3, [r7, #12]
 800030c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800030e:	bf00      	nop
 8000310:	3714      	adds	r7, #20
 8000312:	46bd      	mov	sp, r7
 8000314:	bc80      	pop	{r7}
 8000316:	4770      	bx	lr
 8000318:	40021000 	.word	0x40021000
 800031c:	40010000 	.word	0x40010000

08000320 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000320:	b480      	push	{r7}
 8000322:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000324:	bf00      	nop
 8000326:	46bd      	mov	sp, r7
 8000328:	bc80      	pop	{r7}
 800032a:	4770      	bx	lr

0800032c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800032c:	b480      	push	{r7}
 800032e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000330:	e7fe      	b.n	8000330 <HardFault_Handler+0x4>

08000332 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000332:	b480      	push	{r7}
 8000334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000336:	e7fe      	b.n	8000336 <MemManage_Handler+0x4>

08000338 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800033c:	e7fe      	b.n	800033c <BusFault_Handler+0x4>

0800033e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800033e:	b480      	push	{r7}
 8000340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000342:	e7fe      	b.n	8000342 <UsageFault_Handler+0x4>

08000344 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000348:	bf00      	nop
 800034a:	46bd      	mov	sp, r7
 800034c:	bc80      	pop	{r7}
 800034e:	4770      	bx	lr

08000350 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000350:	b480      	push	{r7}
 8000352:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000354:	bf00      	nop
 8000356:	46bd      	mov	sp, r7
 8000358:	bc80      	pop	{r7}
 800035a:	4770      	bx	lr

0800035c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000360:	bf00      	nop
 8000362:	46bd      	mov	sp, r7
 8000364:	bc80      	pop	{r7}
 8000366:	4770      	bx	lr

08000368 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800036c:	f000 f8a2 	bl	80004b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000370:	bf00      	nop
 8000372:	bd80      	pop	{r7, pc}

08000374 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000378:	4b15      	ldr	r3, [pc, #84]	; (80003d0 <SystemInit+0x5c>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4a14      	ldr	r2, [pc, #80]	; (80003d0 <SystemInit+0x5c>)
 800037e:	f043 0301 	orr.w	r3, r3, #1
 8000382:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000384:	4b12      	ldr	r3, [pc, #72]	; (80003d0 <SystemInit+0x5c>)
 8000386:	685a      	ldr	r2, [r3, #4]
 8000388:	4911      	ldr	r1, [pc, #68]	; (80003d0 <SystemInit+0x5c>)
 800038a:	4b12      	ldr	r3, [pc, #72]	; (80003d4 <SystemInit+0x60>)
 800038c:	4013      	ands	r3, r2
 800038e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000390:	4b0f      	ldr	r3, [pc, #60]	; (80003d0 <SystemInit+0x5c>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a0e      	ldr	r2, [pc, #56]	; (80003d0 <SystemInit+0x5c>)
 8000396:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800039a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800039e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80003a0:	4b0b      	ldr	r3, [pc, #44]	; (80003d0 <SystemInit+0x5c>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	4a0a      	ldr	r2, [pc, #40]	; (80003d0 <SystemInit+0x5c>)
 80003a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80003aa:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80003ac:	4b08      	ldr	r3, [pc, #32]	; (80003d0 <SystemInit+0x5c>)
 80003ae:	685b      	ldr	r3, [r3, #4]
 80003b0:	4a07      	ldr	r2, [pc, #28]	; (80003d0 <SystemInit+0x5c>)
 80003b2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80003b6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80003b8:	4b05      	ldr	r3, [pc, #20]	; (80003d0 <SystemInit+0x5c>)
 80003ba:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80003be:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80003c0:	4b05      	ldr	r3, [pc, #20]	; (80003d8 <SystemInit+0x64>)
 80003c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80003c6:	609a      	str	r2, [r3, #8]
#endif 
}
 80003c8:	bf00      	nop
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bc80      	pop	{r7}
 80003ce:	4770      	bx	lr
 80003d0:	40021000 	.word	0x40021000
 80003d4:	f8ff0000 	.word	0xf8ff0000
 80003d8:	e000ed00 	.word	0xe000ed00

080003dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80003dc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80003de:	e003      	b.n	80003e8 <LoopCopyDataInit>

080003e0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80003e0:	4b0b      	ldr	r3, [pc, #44]	; (8000410 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80003e2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80003e4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80003e6:	3104      	adds	r1, #4

080003e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80003e8:	480a      	ldr	r0, [pc, #40]	; (8000414 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80003ea:	4b0b      	ldr	r3, [pc, #44]	; (8000418 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80003ec:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80003ee:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80003f0:	d3f6      	bcc.n	80003e0 <CopyDataInit>
  ldr r2, =_sbss
 80003f2:	4a0a      	ldr	r2, [pc, #40]	; (800041c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80003f4:	e002      	b.n	80003fc <LoopFillZerobss>

080003f6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80003f6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80003f8:	f842 3b04 	str.w	r3, [r2], #4

080003fc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80003fc:	4b08      	ldr	r3, [pc, #32]	; (8000420 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80003fe:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000400:	d3f9      	bcc.n	80003f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000402:	f7ff ffb7 	bl	8000374 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000406:	f000 feeb 	bl	80011e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800040a:	f7ff fe9f 	bl	800014c <main>
  bx lr
 800040e:	4770      	bx	lr
  ldr r3, =_sidata
 8000410:	0800127c 	.word	0x0800127c
  ldr r0, =_sdata
 8000414:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000418:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 800041c:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000420:	2000002c 	.word	0x2000002c

08000424 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000424:	e7fe      	b.n	8000424 <ADC1_2_IRQHandler>
	...

08000428 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800042c:	4b08      	ldr	r3, [pc, #32]	; (8000450 <HAL_Init+0x28>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	4a07      	ldr	r2, [pc, #28]	; (8000450 <HAL_Init+0x28>)
 8000432:	f043 0310 	orr.w	r3, r3, #16
 8000436:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000438:	2003      	movs	r0, #3
 800043a:	f000 f929 	bl	8000690 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800043e:	2000      	movs	r0, #0
 8000440:	f000 f808 	bl	8000454 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000444:	f7ff ff3a 	bl	80002bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000448:	2300      	movs	r3, #0
}
 800044a:	4618      	mov	r0, r3
 800044c:	bd80      	pop	{r7, pc}
 800044e:	bf00      	nop
 8000450:	40022000 	.word	0x40022000

08000454 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800045c:	4b12      	ldr	r3, [pc, #72]	; (80004a8 <HAL_InitTick+0x54>)
 800045e:	681a      	ldr	r2, [r3, #0]
 8000460:	4b12      	ldr	r3, [pc, #72]	; (80004ac <HAL_InitTick+0x58>)
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	4619      	mov	r1, r3
 8000466:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800046a:	fbb3 f3f1 	udiv	r3, r3, r1
 800046e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000472:	4618      	mov	r0, r3
 8000474:	f000 f933 	bl	80006de <HAL_SYSTICK_Config>
 8000478:	4603      	mov	r3, r0
 800047a:	2b00      	cmp	r3, #0
 800047c:	d001      	beq.n	8000482 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800047e:	2301      	movs	r3, #1
 8000480:	e00e      	b.n	80004a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	2b0f      	cmp	r3, #15
 8000486:	d80a      	bhi.n	800049e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000488:	2200      	movs	r2, #0
 800048a:	6879      	ldr	r1, [r7, #4]
 800048c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000490:	f000 f909 	bl	80006a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000494:	4a06      	ldr	r2, [pc, #24]	; (80004b0 <HAL_InitTick+0x5c>)
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800049a:	2300      	movs	r3, #0
 800049c:	e000      	b.n	80004a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800049e:	2301      	movs	r3, #1
}
 80004a0:	4618      	mov	r0, r3
 80004a2:	3708      	adds	r7, #8
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	20000000 	.word	0x20000000
 80004ac:	20000008 	.word	0x20000008
 80004b0:	20000004 	.word	0x20000004

080004b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80004b8:	4b05      	ldr	r3, [pc, #20]	; (80004d0 <HAL_IncTick+0x1c>)
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	461a      	mov	r2, r3
 80004be:	4b05      	ldr	r3, [pc, #20]	; (80004d4 <HAL_IncTick+0x20>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	4413      	add	r3, r2
 80004c4:	4a03      	ldr	r2, [pc, #12]	; (80004d4 <HAL_IncTick+0x20>)
 80004c6:	6013      	str	r3, [r2, #0]
}
 80004c8:	bf00      	nop
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bc80      	pop	{r7}
 80004ce:	4770      	bx	lr
 80004d0:	20000008 	.word	0x20000008
 80004d4:	20000028 	.word	0x20000028

080004d8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  return uwTick;
 80004dc:	4b02      	ldr	r3, [pc, #8]	; (80004e8 <HAL_GetTick+0x10>)
 80004de:	681b      	ldr	r3, [r3, #0]
}
 80004e0:	4618      	mov	r0, r3
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bc80      	pop	{r7}
 80004e6:	4770      	bx	lr
 80004e8:	20000028 	.word	0x20000028

080004ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b084      	sub	sp, #16
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80004f4:	f7ff fff0 	bl	80004d8 <HAL_GetTick>
 80004f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000504:	d005      	beq.n	8000512 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000506:	4b09      	ldr	r3, [pc, #36]	; (800052c <HAL_Delay+0x40>)
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	461a      	mov	r2, r3
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	4413      	add	r3, r2
 8000510:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000512:	bf00      	nop
 8000514:	f7ff ffe0 	bl	80004d8 <HAL_GetTick>
 8000518:	4602      	mov	r2, r0
 800051a:	68bb      	ldr	r3, [r7, #8]
 800051c:	1ad3      	subs	r3, r2, r3
 800051e:	68fa      	ldr	r2, [r7, #12]
 8000520:	429a      	cmp	r2, r3
 8000522:	d8f7      	bhi.n	8000514 <HAL_Delay+0x28>
  {
  }
}
 8000524:	bf00      	nop
 8000526:	3710      	adds	r7, #16
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}
 800052c:	20000008 	.word	0x20000008

08000530 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000530:	b480      	push	{r7}
 8000532:	b085      	sub	sp, #20
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	f003 0307 	and.w	r3, r3, #7
 800053e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000540:	4b0c      	ldr	r3, [pc, #48]	; (8000574 <__NVIC_SetPriorityGrouping+0x44>)
 8000542:	68db      	ldr	r3, [r3, #12]
 8000544:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000546:	68ba      	ldr	r2, [r7, #8]
 8000548:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800054c:	4013      	ands	r3, r2
 800054e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000554:	68bb      	ldr	r3, [r7, #8]
 8000556:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000558:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800055c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000560:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000562:	4a04      	ldr	r2, [pc, #16]	; (8000574 <__NVIC_SetPriorityGrouping+0x44>)
 8000564:	68bb      	ldr	r3, [r7, #8]
 8000566:	60d3      	str	r3, [r2, #12]
}
 8000568:	bf00      	nop
 800056a:	3714      	adds	r7, #20
 800056c:	46bd      	mov	sp, r7
 800056e:	bc80      	pop	{r7}
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	e000ed00 	.word	0xe000ed00

08000578 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800057c:	4b04      	ldr	r3, [pc, #16]	; (8000590 <__NVIC_GetPriorityGrouping+0x18>)
 800057e:	68db      	ldr	r3, [r3, #12]
 8000580:	0a1b      	lsrs	r3, r3, #8
 8000582:	f003 0307 	and.w	r3, r3, #7
}
 8000586:	4618      	mov	r0, r3
 8000588:	46bd      	mov	sp, r7
 800058a:	bc80      	pop	{r7}
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	e000ed00 	.word	0xe000ed00

08000594 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	6039      	str	r1, [r7, #0]
 800059e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	db0a      	blt.n	80005be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005a8:	683b      	ldr	r3, [r7, #0]
 80005aa:	b2da      	uxtb	r2, r3
 80005ac:	490c      	ldr	r1, [pc, #48]	; (80005e0 <__NVIC_SetPriority+0x4c>)
 80005ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005b2:	0112      	lsls	r2, r2, #4
 80005b4:	b2d2      	uxtb	r2, r2
 80005b6:	440b      	add	r3, r1
 80005b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005bc:	e00a      	b.n	80005d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	b2da      	uxtb	r2, r3
 80005c2:	4908      	ldr	r1, [pc, #32]	; (80005e4 <__NVIC_SetPriority+0x50>)
 80005c4:	79fb      	ldrb	r3, [r7, #7]
 80005c6:	f003 030f 	and.w	r3, r3, #15
 80005ca:	3b04      	subs	r3, #4
 80005cc:	0112      	lsls	r2, r2, #4
 80005ce:	b2d2      	uxtb	r2, r2
 80005d0:	440b      	add	r3, r1
 80005d2:	761a      	strb	r2, [r3, #24]
}
 80005d4:	bf00      	nop
 80005d6:	370c      	adds	r7, #12
 80005d8:	46bd      	mov	sp, r7
 80005da:	bc80      	pop	{r7}
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	e000e100 	.word	0xe000e100
 80005e4:	e000ed00 	.word	0xe000ed00

080005e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b089      	sub	sp, #36	; 0x24
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	60f8      	str	r0, [r7, #12]
 80005f0:	60b9      	str	r1, [r7, #8]
 80005f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	f003 0307 	and.w	r3, r3, #7
 80005fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005fc:	69fb      	ldr	r3, [r7, #28]
 80005fe:	f1c3 0307 	rsb	r3, r3, #7
 8000602:	2b04      	cmp	r3, #4
 8000604:	bf28      	it	cs
 8000606:	2304      	movcs	r3, #4
 8000608:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800060a:	69fb      	ldr	r3, [r7, #28]
 800060c:	3304      	adds	r3, #4
 800060e:	2b06      	cmp	r3, #6
 8000610:	d902      	bls.n	8000618 <NVIC_EncodePriority+0x30>
 8000612:	69fb      	ldr	r3, [r7, #28]
 8000614:	3b03      	subs	r3, #3
 8000616:	e000      	b.n	800061a <NVIC_EncodePriority+0x32>
 8000618:	2300      	movs	r3, #0
 800061a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800061c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000620:	69bb      	ldr	r3, [r7, #24]
 8000622:	fa02 f303 	lsl.w	r3, r2, r3
 8000626:	43da      	mvns	r2, r3
 8000628:	68bb      	ldr	r3, [r7, #8]
 800062a:	401a      	ands	r2, r3
 800062c:	697b      	ldr	r3, [r7, #20]
 800062e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000630:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000634:	697b      	ldr	r3, [r7, #20]
 8000636:	fa01 f303 	lsl.w	r3, r1, r3
 800063a:	43d9      	mvns	r1, r3
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000640:	4313      	orrs	r3, r2
         );
}
 8000642:	4618      	mov	r0, r3
 8000644:	3724      	adds	r7, #36	; 0x24
 8000646:	46bd      	mov	sp, r7
 8000648:	bc80      	pop	{r7}
 800064a:	4770      	bx	lr

0800064c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	3b01      	subs	r3, #1
 8000658:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800065c:	d301      	bcc.n	8000662 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800065e:	2301      	movs	r3, #1
 8000660:	e00f      	b.n	8000682 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000662:	4a0a      	ldr	r2, [pc, #40]	; (800068c <SysTick_Config+0x40>)
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	3b01      	subs	r3, #1
 8000668:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800066a:	210f      	movs	r1, #15
 800066c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000670:	f7ff ff90 	bl	8000594 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000674:	4b05      	ldr	r3, [pc, #20]	; (800068c <SysTick_Config+0x40>)
 8000676:	2200      	movs	r2, #0
 8000678:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800067a:	4b04      	ldr	r3, [pc, #16]	; (800068c <SysTick_Config+0x40>)
 800067c:	2207      	movs	r2, #7
 800067e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000680:	2300      	movs	r3, #0
}
 8000682:	4618      	mov	r0, r3
 8000684:	3708      	adds	r7, #8
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	e000e010 	.word	0xe000e010

08000690 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000698:	6878      	ldr	r0, [r7, #4]
 800069a:	f7ff ff49 	bl	8000530 <__NVIC_SetPriorityGrouping>
}
 800069e:	bf00      	nop
 80006a0:	3708      	adds	r7, #8
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}

080006a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006a6:	b580      	push	{r7, lr}
 80006a8:	b086      	sub	sp, #24
 80006aa:	af00      	add	r7, sp, #0
 80006ac:	4603      	mov	r3, r0
 80006ae:	60b9      	str	r1, [r7, #8]
 80006b0:	607a      	str	r2, [r7, #4]
 80006b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80006b4:	2300      	movs	r3, #0
 80006b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80006b8:	f7ff ff5e 	bl	8000578 <__NVIC_GetPriorityGrouping>
 80006bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80006be:	687a      	ldr	r2, [r7, #4]
 80006c0:	68b9      	ldr	r1, [r7, #8]
 80006c2:	6978      	ldr	r0, [r7, #20]
 80006c4:	f7ff ff90 	bl	80005e8 <NVIC_EncodePriority>
 80006c8:	4602      	mov	r2, r0
 80006ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006ce:	4611      	mov	r1, r2
 80006d0:	4618      	mov	r0, r3
 80006d2:	f7ff ff5f 	bl	8000594 <__NVIC_SetPriority>
}
 80006d6:	bf00      	nop
 80006d8:	3718      	adds	r7, #24
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}

080006de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80006de:	b580      	push	{r7, lr}
 80006e0:	b082      	sub	sp, #8
 80006e2:	af00      	add	r7, sp, #0
 80006e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80006e6:	6878      	ldr	r0, [r7, #4]
 80006e8:	f7ff ffb0 	bl	800064c <SysTick_Config>
 80006ec:	4603      	mov	r3, r0
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
	...

080006f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b08b      	sub	sp, #44	; 0x2c
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
 8000700:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000702:	2300      	movs	r3, #0
 8000704:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000706:	2300      	movs	r3, #0
 8000708:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800070a:	e127      	b.n	800095c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800070c:	2201      	movs	r2, #1
 800070e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000710:	fa02 f303 	lsl.w	r3, r2, r3
 8000714:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000716:	683b      	ldr	r3, [r7, #0]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	69fa      	ldr	r2, [r7, #28]
 800071c:	4013      	ands	r3, r2
 800071e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000720:	69ba      	ldr	r2, [r7, #24]
 8000722:	69fb      	ldr	r3, [r7, #28]
 8000724:	429a      	cmp	r2, r3
 8000726:	f040 8116 	bne.w	8000956 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800072a:	683b      	ldr	r3, [r7, #0]
 800072c:	685b      	ldr	r3, [r3, #4]
 800072e:	2b12      	cmp	r3, #18
 8000730:	d034      	beq.n	800079c <HAL_GPIO_Init+0xa4>
 8000732:	2b12      	cmp	r3, #18
 8000734:	d80d      	bhi.n	8000752 <HAL_GPIO_Init+0x5a>
 8000736:	2b02      	cmp	r3, #2
 8000738:	d02b      	beq.n	8000792 <HAL_GPIO_Init+0x9a>
 800073a:	2b02      	cmp	r3, #2
 800073c:	d804      	bhi.n	8000748 <HAL_GPIO_Init+0x50>
 800073e:	2b00      	cmp	r3, #0
 8000740:	d031      	beq.n	80007a6 <HAL_GPIO_Init+0xae>
 8000742:	2b01      	cmp	r3, #1
 8000744:	d01c      	beq.n	8000780 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000746:	e048      	b.n	80007da <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000748:	2b03      	cmp	r3, #3
 800074a:	d043      	beq.n	80007d4 <HAL_GPIO_Init+0xdc>
 800074c:	2b11      	cmp	r3, #17
 800074e:	d01b      	beq.n	8000788 <HAL_GPIO_Init+0x90>
          break;
 8000750:	e043      	b.n	80007da <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000752:	4a89      	ldr	r2, [pc, #548]	; (8000978 <HAL_GPIO_Init+0x280>)
 8000754:	4293      	cmp	r3, r2
 8000756:	d026      	beq.n	80007a6 <HAL_GPIO_Init+0xae>
 8000758:	4a87      	ldr	r2, [pc, #540]	; (8000978 <HAL_GPIO_Init+0x280>)
 800075a:	4293      	cmp	r3, r2
 800075c:	d806      	bhi.n	800076c <HAL_GPIO_Init+0x74>
 800075e:	4a87      	ldr	r2, [pc, #540]	; (800097c <HAL_GPIO_Init+0x284>)
 8000760:	4293      	cmp	r3, r2
 8000762:	d020      	beq.n	80007a6 <HAL_GPIO_Init+0xae>
 8000764:	4a86      	ldr	r2, [pc, #536]	; (8000980 <HAL_GPIO_Init+0x288>)
 8000766:	4293      	cmp	r3, r2
 8000768:	d01d      	beq.n	80007a6 <HAL_GPIO_Init+0xae>
          break;
 800076a:	e036      	b.n	80007da <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800076c:	4a85      	ldr	r2, [pc, #532]	; (8000984 <HAL_GPIO_Init+0x28c>)
 800076e:	4293      	cmp	r3, r2
 8000770:	d019      	beq.n	80007a6 <HAL_GPIO_Init+0xae>
 8000772:	4a85      	ldr	r2, [pc, #532]	; (8000988 <HAL_GPIO_Init+0x290>)
 8000774:	4293      	cmp	r3, r2
 8000776:	d016      	beq.n	80007a6 <HAL_GPIO_Init+0xae>
 8000778:	4a84      	ldr	r2, [pc, #528]	; (800098c <HAL_GPIO_Init+0x294>)
 800077a:	4293      	cmp	r3, r2
 800077c:	d013      	beq.n	80007a6 <HAL_GPIO_Init+0xae>
          break;
 800077e:	e02c      	b.n	80007da <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	68db      	ldr	r3, [r3, #12]
 8000784:	623b      	str	r3, [r7, #32]
          break;
 8000786:	e028      	b.n	80007da <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	68db      	ldr	r3, [r3, #12]
 800078c:	3304      	adds	r3, #4
 800078e:	623b      	str	r3, [r7, #32]
          break;
 8000790:	e023      	b.n	80007da <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	68db      	ldr	r3, [r3, #12]
 8000796:	3308      	adds	r3, #8
 8000798:	623b      	str	r3, [r7, #32]
          break;
 800079a:	e01e      	b.n	80007da <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	68db      	ldr	r3, [r3, #12]
 80007a0:	330c      	adds	r3, #12
 80007a2:	623b      	str	r3, [r7, #32]
          break;
 80007a4:	e019      	b.n	80007da <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	689b      	ldr	r3, [r3, #8]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d102      	bne.n	80007b4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80007ae:	2304      	movs	r3, #4
 80007b0:	623b      	str	r3, [r7, #32]
          break;
 80007b2:	e012      	b.n	80007da <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	689b      	ldr	r3, [r3, #8]
 80007b8:	2b01      	cmp	r3, #1
 80007ba:	d105      	bne.n	80007c8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80007bc:	2308      	movs	r3, #8
 80007be:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	69fa      	ldr	r2, [r7, #28]
 80007c4:	611a      	str	r2, [r3, #16]
          break;
 80007c6:	e008      	b.n	80007da <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80007c8:	2308      	movs	r3, #8
 80007ca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	69fa      	ldr	r2, [r7, #28]
 80007d0:	615a      	str	r2, [r3, #20]
          break;
 80007d2:	e002      	b.n	80007da <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80007d4:	2300      	movs	r3, #0
 80007d6:	623b      	str	r3, [r7, #32]
          break;
 80007d8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80007da:	69bb      	ldr	r3, [r7, #24]
 80007dc:	2bff      	cmp	r3, #255	; 0xff
 80007de:	d801      	bhi.n	80007e4 <HAL_GPIO_Init+0xec>
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	e001      	b.n	80007e8 <HAL_GPIO_Init+0xf0>
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	3304      	adds	r3, #4
 80007e8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80007ea:	69bb      	ldr	r3, [r7, #24]
 80007ec:	2bff      	cmp	r3, #255	; 0xff
 80007ee:	d802      	bhi.n	80007f6 <HAL_GPIO_Init+0xfe>
 80007f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007f2:	009b      	lsls	r3, r3, #2
 80007f4:	e002      	b.n	80007fc <HAL_GPIO_Init+0x104>
 80007f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007f8:	3b08      	subs	r3, #8
 80007fa:	009b      	lsls	r3, r3, #2
 80007fc:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80007fe:	697b      	ldr	r3, [r7, #20]
 8000800:	681a      	ldr	r2, [r3, #0]
 8000802:	210f      	movs	r1, #15
 8000804:	693b      	ldr	r3, [r7, #16]
 8000806:	fa01 f303 	lsl.w	r3, r1, r3
 800080a:	43db      	mvns	r3, r3
 800080c:	401a      	ands	r2, r3
 800080e:	6a39      	ldr	r1, [r7, #32]
 8000810:	693b      	ldr	r3, [r7, #16]
 8000812:	fa01 f303 	lsl.w	r3, r1, r3
 8000816:	431a      	orrs	r2, r3
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	685b      	ldr	r3, [r3, #4]
 8000820:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000824:	2b00      	cmp	r3, #0
 8000826:	f000 8096 	beq.w	8000956 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800082a:	4b59      	ldr	r3, [pc, #356]	; (8000990 <HAL_GPIO_Init+0x298>)
 800082c:	699b      	ldr	r3, [r3, #24]
 800082e:	4a58      	ldr	r2, [pc, #352]	; (8000990 <HAL_GPIO_Init+0x298>)
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	6193      	str	r3, [r2, #24]
 8000836:	4b56      	ldr	r3, [pc, #344]	; (8000990 <HAL_GPIO_Init+0x298>)
 8000838:	699b      	ldr	r3, [r3, #24]
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	60bb      	str	r3, [r7, #8]
 8000840:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000842:	4a54      	ldr	r2, [pc, #336]	; (8000994 <HAL_GPIO_Init+0x29c>)
 8000844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000846:	089b      	lsrs	r3, r3, #2
 8000848:	3302      	adds	r3, #2
 800084a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800084e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000852:	f003 0303 	and.w	r3, r3, #3
 8000856:	009b      	lsls	r3, r3, #2
 8000858:	220f      	movs	r2, #15
 800085a:	fa02 f303 	lsl.w	r3, r2, r3
 800085e:	43db      	mvns	r3, r3
 8000860:	68fa      	ldr	r2, [r7, #12]
 8000862:	4013      	ands	r3, r2
 8000864:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	4a4b      	ldr	r2, [pc, #300]	; (8000998 <HAL_GPIO_Init+0x2a0>)
 800086a:	4293      	cmp	r3, r2
 800086c:	d013      	beq.n	8000896 <HAL_GPIO_Init+0x19e>
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	4a4a      	ldr	r2, [pc, #296]	; (800099c <HAL_GPIO_Init+0x2a4>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d00d      	beq.n	8000892 <HAL_GPIO_Init+0x19a>
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	4a49      	ldr	r2, [pc, #292]	; (80009a0 <HAL_GPIO_Init+0x2a8>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d007      	beq.n	800088e <HAL_GPIO_Init+0x196>
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	4a48      	ldr	r2, [pc, #288]	; (80009a4 <HAL_GPIO_Init+0x2ac>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d101      	bne.n	800088a <HAL_GPIO_Init+0x192>
 8000886:	2303      	movs	r3, #3
 8000888:	e006      	b.n	8000898 <HAL_GPIO_Init+0x1a0>
 800088a:	2304      	movs	r3, #4
 800088c:	e004      	b.n	8000898 <HAL_GPIO_Init+0x1a0>
 800088e:	2302      	movs	r3, #2
 8000890:	e002      	b.n	8000898 <HAL_GPIO_Init+0x1a0>
 8000892:	2301      	movs	r3, #1
 8000894:	e000      	b.n	8000898 <HAL_GPIO_Init+0x1a0>
 8000896:	2300      	movs	r3, #0
 8000898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800089a:	f002 0203 	and.w	r2, r2, #3
 800089e:	0092      	lsls	r2, r2, #2
 80008a0:	4093      	lsls	r3, r2
 80008a2:	68fa      	ldr	r2, [r7, #12]
 80008a4:	4313      	orrs	r3, r2
 80008a6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80008a8:	493a      	ldr	r1, [pc, #232]	; (8000994 <HAL_GPIO_Init+0x29c>)
 80008aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ac:	089b      	lsrs	r3, r3, #2
 80008ae:	3302      	adds	r3, #2
 80008b0:	68fa      	ldr	r2, [r7, #12]
 80008b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	685b      	ldr	r3, [r3, #4]
 80008ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d006      	beq.n	80008d0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80008c2:	4b39      	ldr	r3, [pc, #228]	; (80009a8 <HAL_GPIO_Init+0x2b0>)
 80008c4:	681a      	ldr	r2, [r3, #0]
 80008c6:	4938      	ldr	r1, [pc, #224]	; (80009a8 <HAL_GPIO_Init+0x2b0>)
 80008c8:	69bb      	ldr	r3, [r7, #24]
 80008ca:	4313      	orrs	r3, r2
 80008cc:	600b      	str	r3, [r1, #0]
 80008ce:	e006      	b.n	80008de <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80008d0:	4b35      	ldr	r3, [pc, #212]	; (80009a8 <HAL_GPIO_Init+0x2b0>)
 80008d2:	681a      	ldr	r2, [r3, #0]
 80008d4:	69bb      	ldr	r3, [r7, #24]
 80008d6:	43db      	mvns	r3, r3
 80008d8:	4933      	ldr	r1, [pc, #204]	; (80009a8 <HAL_GPIO_Init+0x2b0>)
 80008da:	4013      	ands	r3, r2
 80008dc:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	685b      	ldr	r3, [r3, #4]
 80008e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d006      	beq.n	80008f8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80008ea:	4b2f      	ldr	r3, [pc, #188]	; (80009a8 <HAL_GPIO_Init+0x2b0>)
 80008ec:	685a      	ldr	r2, [r3, #4]
 80008ee:	492e      	ldr	r1, [pc, #184]	; (80009a8 <HAL_GPIO_Init+0x2b0>)
 80008f0:	69bb      	ldr	r3, [r7, #24]
 80008f2:	4313      	orrs	r3, r2
 80008f4:	604b      	str	r3, [r1, #4]
 80008f6:	e006      	b.n	8000906 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80008f8:	4b2b      	ldr	r3, [pc, #172]	; (80009a8 <HAL_GPIO_Init+0x2b0>)
 80008fa:	685a      	ldr	r2, [r3, #4]
 80008fc:	69bb      	ldr	r3, [r7, #24]
 80008fe:	43db      	mvns	r3, r3
 8000900:	4929      	ldr	r1, [pc, #164]	; (80009a8 <HAL_GPIO_Init+0x2b0>)
 8000902:	4013      	ands	r3, r2
 8000904:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	685b      	ldr	r3, [r3, #4]
 800090a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800090e:	2b00      	cmp	r3, #0
 8000910:	d006      	beq.n	8000920 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000912:	4b25      	ldr	r3, [pc, #148]	; (80009a8 <HAL_GPIO_Init+0x2b0>)
 8000914:	689a      	ldr	r2, [r3, #8]
 8000916:	4924      	ldr	r1, [pc, #144]	; (80009a8 <HAL_GPIO_Init+0x2b0>)
 8000918:	69bb      	ldr	r3, [r7, #24]
 800091a:	4313      	orrs	r3, r2
 800091c:	608b      	str	r3, [r1, #8]
 800091e:	e006      	b.n	800092e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000920:	4b21      	ldr	r3, [pc, #132]	; (80009a8 <HAL_GPIO_Init+0x2b0>)
 8000922:	689a      	ldr	r2, [r3, #8]
 8000924:	69bb      	ldr	r3, [r7, #24]
 8000926:	43db      	mvns	r3, r3
 8000928:	491f      	ldr	r1, [pc, #124]	; (80009a8 <HAL_GPIO_Init+0x2b0>)
 800092a:	4013      	ands	r3, r2
 800092c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	685b      	ldr	r3, [r3, #4]
 8000932:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000936:	2b00      	cmp	r3, #0
 8000938:	d006      	beq.n	8000948 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800093a:	4b1b      	ldr	r3, [pc, #108]	; (80009a8 <HAL_GPIO_Init+0x2b0>)
 800093c:	68da      	ldr	r2, [r3, #12]
 800093e:	491a      	ldr	r1, [pc, #104]	; (80009a8 <HAL_GPIO_Init+0x2b0>)
 8000940:	69bb      	ldr	r3, [r7, #24]
 8000942:	4313      	orrs	r3, r2
 8000944:	60cb      	str	r3, [r1, #12]
 8000946:	e006      	b.n	8000956 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000948:	4b17      	ldr	r3, [pc, #92]	; (80009a8 <HAL_GPIO_Init+0x2b0>)
 800094a:	68da      	ldr	r2, [r3, #12]
 800094c:	69bb      	ldr	r3, [r7, #24]
 800094e:	43db      	mvns	r3, r3
 8000950:	4915      	ldr	r1, [pc, #84]	; (80009a8 <HAL_GPIO_Init+0x2b0>)
 8000952:	4013      	ands	r3, r2
 8000954:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000958:	3301      	adds	r3, #1
 800095a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	681a      	ldr	r2, [r3, #0]
 8000960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000962:	fa22 f303 	lsr.w	r3, r2, r3
 8000966:	2b00      	cmp	r3, #0
 8000968:	f47f aed0 	bne.w	800070c <HAL_GPIO_Init+0x14>
  }
}
 800096c:	bf00      	nop
 800096e:	372c      	adds	r7, #44	; 0x2c
 8000970:	46bd      	mov	sp, r7
 8000972:	bc80      	pop	{r7}
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	10210000 	.word	0x10210000
 800097c:	10110000 	.word	0x10110000
 8000980:	10120000 	.word	0x10120000
 8000984:	10310000 	.word	0x10310000
 8000988:	10320000 	.word	0x10320000
 800098c:	10220000 	.word	0x10220000
 8000990:	40021000 	.word	0x40021000
 8000994:	40010000 	.word	0x40010000
 8000998:	40010800 	.word	0x40010800
 800099c:	40010c00 	.word	0x40010c00
 80009a0:	40011000 	.word	0x40011000
 80009a4:	40011400 	.word	0x40011400
 80009a8:	40010400 	.word	0x40010400

080009ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
 80009b4:	460b      	mov	r3, r1
 80009b6:	807b      	strh	r3, [r7, #2]
 80009b8:	4613      	mov	r3, r2
 80009ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80009bc:	787b      	ldrb	r3, [r7, #1]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d003      	beq.n	80009ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80009c2:	887a      	ldrh	r2, [r7, #2]
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80009c8:	e003      	b.n	80009d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80009ca:	887b      	ldrh	r3, [r7, #2]
 80009cc:	041a      	lsls	r2, r3, #16
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	611a      	str	r2, [r3, #16]
}
 80009d2:	bf00      	nop
 80009d4:	370c      	adds	r7, #12
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bc80      	pop	{r7}
 80009da:	4770      	bx	lr

080009dc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
 80009e4:	460b      	mov	r3, r1
 80009e6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	68da      	ldr	r2, [r3, #12]
 80009ec:	887b      	ldrh	r3, [r7, #2]
 80009ee:	4013      	ands	r3, r2
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d003      	beq.n	80009fc <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80009f4:	887a      	ldrh	r2, [r7, #2]
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80009fa:	e002      	b.n	8000a02 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80009fc:	887a      	ldrh	r2, [r7, #2]
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	611a      	str	r2, [r3, #16]
}
 8000a02:	bf00      	nop
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bc80      	pop	{r7}
 8000a0a:	4770      	bx	lr

08000a0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b086      	sub	sp, #24
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d101      	bne.n	8000a1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	e26c      	b.n	8000ef8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	f003 0301 	and.w	r3, r3, #1
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	f000 8087 	beq.w	8000b3a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000a2c:	4b92      	ldr	r3, [pc, #584]	; (8000c78 <HAL_RCC_OscConfig+0x26c>)
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	f003 030c 	and.w	r3, r3, #12
 8000a34:	2b04      	cmp	r3, #4
 8000a36:	d00c      	beq.n	8000a52 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000a38:	4b8f      	ldr	r3, [pc, #572]	; (8000c78 <HAL_RCC_OscConfig+0x26c>)
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	f003 030c 	and.w	r3, r3, #12
 8000a40:	2b08      	cmp	r3, #8
 8000a42:	d112      	bne.n	8000a6a <HAL_RCC_OscConfig+0x5e>
 8000a44:	4b8c      	ldr	r3, [pc, #560]	; (8000c78 <HAL_RCC_OscConfig+0x26c>)
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a50:	d10b      	bne.n	8000a6a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a52:	4b89      	ldr	r3, [pc, #548]	; (8000c78 <HAL_RCC_OscConfig+0x26c>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d06c      	beq.n	8000b38 <HAL_RCC_OscConfig+0x12c>
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	685b      	ldr	r3, [r3, #4]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d168      	bne.n	8000b38 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000a66:	2301      	movs	r3, #1
 8000a68:	e246      	b.n	8000ef8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	685b      	ldr	r3, [r3, #4]
 8000a6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a72:	d106      	bne.n	8000a82 <HAL_RCC_OscConfig+0x76>
 8000a74:	4b80      	ldr	r3, [pc, #512]	; (8000c78 <HAL_RCC_OscConfig+0x26c>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a7f      	ldr	r2, [pc, #508]	; (8000c78 <HAL_RCC_OscConfig+0x26c>)
 8000a7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a7e:	6013      	str	r3, [r2, #0]
 8000a80:	e02e      	b.n	8000ae0 <HAL_RCC_OscConfig+0xd4>
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d10c      	bne.n	8000aa4 <HAL_RCC_OscConfig+0x98>
 8000a8a:	4b7b      	ldr	r3, [pc, #492]	; (8000c78 <HAL_RCC_OscConfig+0x26c>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4a7a      	ldr	r2, [pc, #488]	; (8000c78 <HAL_RCC_OscConfig+0x26c>)
 8000a90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a94:	6013      	str	r3, [r2, #0]
 8000a96:	4b78      	ldr	r3, [pc, #480]	; (8000c78 <HAL_RCC_OscConfig+0x26c>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4a77      	ldr	r2, [pc, #476]	; (8000c78 <HAL_RCC_OscConfig+0x26c>)
 8000a9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000aa0:	6013      	str	r3, [r2, #0]
 8000aa2:	e01d      	b.n	8000ae0 <HAL_RCC_OscConfig+0xd4>
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000aac:	d10c      	bne.n	8000ac8 <HAL_RCC_OscConfig+0xbc>
 8000aae:	4b72      	ldr	r3, [pc, #456]	; (8000c78 <HAL_RCC_OscConfig+0x26c>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4a71      	ldr	r2, [pc, #452]	; (8000c78 <HAL_RCC_OscConfig+0x26c>)
 8000ab4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ab8:	6013      	str	r3, [r2, #0]
 8000aba:	4b6f      	ldr	r3, [pc, #444]	; (8000c78 <HAL_RCC_OscConfig+0x26c>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4a6e      	ldr	r2, [pc, #440]	; (8000c78 <HAL_RCC_OscConfig+0x26c>)
 8000ac0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ac4:	6013      	str	r3, [r2, #0]
 8000ac6:	e00b      	b.n	8000ae0 <HAL_RCC_OscConfig+0xd4>
 8000ac8:	4b6b      	ldr	r3, [pc, #428]	; (8000c78 <HAL_RCC_OscConfig+0x26c>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a6a      	ldr	r2, [pc, #424]	; (8000c78 <HAL_RCC_OscConfig+0x26c>)
 8000ace:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ad2:	6013      	str	r3, [r2, #0]
 8000ad4:	4b68      	ldr	r3, [pc, #416]	; (8000c78 <HAL_RCC_OscConfig+0x26c>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a67      	ldr	r2, [pc, #412]	; (8000c78 <HAL_RCC_OscConfig+0x26c>)
 8000ada:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ade:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d013      	beq.n	8000b10 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ae8:	f7ff fcf6 	bl	80004d8 <HAL_GetTick>
 8000aec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000aee:	e008      	b.n	8000b02 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000af0:	f7ff fcf2 	bl	80004d8 <HAL_GetTick>
 8000af4:	4602      	mov	r2, r0
 8000af6:	693b      	ldr	r3, [r7, #16]
 8000af8:	1ad3      	subs	r3, r2, r3
 8000afa:	2b64      	cmp	r3, #100	; 0x64
 8000afc:	d901      	bls.n	8000b02 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000afe:	2303      	movs	r3, #3
 8000b00:	e1fa      	b.n	8000ef8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b02:	4b5d      	ldr	r3, [pc, #372]	; (8000c78 <HAL_RCC_OscConfig+0x26c>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d0f0      	beq.n	8000af0 <HAL_RCC_OscConfig+0xe4>
 8000b0e:	e014      	b.n	8000b3a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b10:	f7ff fce2 	bl	80004d8 <HAL_GetTick>
 8000b14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b16:	e008      	b.n	8000b2a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b18:	f7ff fcde 	bl	80004d8 <HAL_GetTick>
 8000b1c:	4602      	mov	r2, r0
 8000b1e:	693b      	ldr	r3, [r7, #16]
 8000b20:	1ad3      	subs	r3, r2, r3
 8000b22:	2b64      	cmp	r3, #100	; 0x64
 8000b24:	d901      	bls.n	8000b2a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000b26:	2303      	movs	r3, #3
 8000b28:	e1e6      	b.n	8000ef8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b2a:	4b53      	ldr	r3, [pc, #332]	; (8000c78 <HAL_RCC_OscConfig+0x26c>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d1f0      	bne.n	8000b18 <HAL_RCC_OscConfig+0x10c>
 8000b36:	e000      	b.n	8000b3a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	f003 0302 	and.w	r3, r3, #2
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d063      	beq.n	8000c0e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000b46:	4b4c      	ldr	r3, [pc, #304]	; (8000c78 <HAL_RCC_OscConfig+0x26c>)
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	f003 030c 	and.w	r3, r3, #12
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d00b      	beq.n	8000b6a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000b52:	4b49      	ldr	r3, [pc, #292]	; (8000c78 <HAL_RCC_OscConfig+0x26c>)
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	f003 030c 	and.w	r3, r3, #12
 8000b5a:	2b08      	cmp	r3, #8
 8000b5c:	d11c      	bne.n	8000b98 <HAL_RCC_OscConfig+0x18c>
 8000b5e:	4b46      	ldr	r3, [pc, #280]	; (8000c78 <HAL_RCC_OscConfig+0x26c>)
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d116      	bne.n	8000b98 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b6a:	4b43      	ldr	r3, [pc, #268]	; (8000c78 <HAL_RCC_OscConfig+0x26c>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	f003 0302 	and.w	r3, r3, #2
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d005      	beq.n	8000b82 <HAL_RCC_OscConfig+0x176>
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	691b      	ldr	r3, [r3, #16]
 8000b7a:	2b01      	cmp	r3, #1
 8000b7c:	d001      	beq.n	8000b82 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	e1ba      	b.n	8000ef8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b82:	4b3d      	ldr	r3, [pc, #244]	; (8000c78 <HAL_RCC_OscConfig+0x26c>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	695b      	ldr	r3, [r3, #20]
 8000b8e:	00db      	lsls	r3, r3, #3
 8000b90:	4939      	ldr	r1, [pc, #228]	; (8000c78 <HAL_RCC_OscConfig+0x26c>)
 8000b92:	4313      	orrs	r3, r2
 8000b94:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b96:	e03a      	b.n	8000c0e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	691b      	ldr	r3, [r3, #16]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d020      	beq.n	8000be2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ba0:	4b36      	ldr	r3, [pc, #216]	; (8000c7c <HAL_RCC_OscConfig+0x270>)
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ba6:	f7ff fc97 	bl	80004d8 <HAL_GetTick>
 8000baa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bac:	e008      	b.n	8000bc0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000bae:	f7ff fc93 	bl	80004d8 <HAL_GetTick>
 8000bb2:	4602      	mov	r2, r0
 8000bb4:	693b      	ldr	r3, [r7, #16]
 8000bb6:	1ad3      	subs	r3, r2, r3
 8000bb8:	2b02      	cmp	r3, #2
 8000bba:	d901      	bls.n	8000bc0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000bbc:	2303      	movs	r3, #3
 8000bbe:	e19b      	b.n	8000ef8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bc0:	4b2d      	ldr	r3, [pc, #180]	; (8000c78 <HAL_RCC_OscConfig+0x26c>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f003 0302 	and.w	r3, r3, #2
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d0f0      	beq.n	8000bae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bcc:	4b2a      	ldr	r3, [pc, #168]	; (8000c78 <HAL_RCC_OscConfig+0x26c>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	695b      	ldr	r3, [r3, #20]
 8000bd8:	00db      	lsls	r3, r3, #3
 8000bda:	4927      	ldr	r1, [pc, #156]	; (8000c78 <HAL_RCC_OscConfig+0x26c>)
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	600b      	str	r3, [r1, #0]
 8000be0:	e015      	b.n	8000c0e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000be2:	4b26      	ldr	r3, [pc, #152]	; (8000c7c <HAL_RCC_OscConfig+0x270>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000be8:	f7ff fc76 	bl	80004d8 <HAL_GetTick>
 8000bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000bee:	e008      	b.n	8000c02 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000bf0:	f7ff fc72 	bl	80004d8 <HAL_GetTick>
 8000bf4:	4602      	mov	r2, r0
 8000bf6:	693b      	ldr	r3, [r7, #16]
 8000bf8:	1ad3      	subs	r3, r2, r3
 8000bfa:	2b02      	cmp	r3, #2
 8000bfc:	d901      	bls.n	8000c02 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000bfe:	2303      	movs	r3, #3
 8000c00:	e17a      	b.n	8000ef8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c02:	4b1d      	ldr	r3, [pc, #116]	; (8000c78 <HAL_RCC_OscConfig+0x26c>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f003 0302 	and.w	r3, r3, #2
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d1f0      	bne.n	8000bf0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f003 0308 	and.w	r3, r3, #8
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d03a      	beq.n	8000c90 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	699b      	ldr	r3, [r3, #24]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d019      	beq.n	8000c56 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000c22:	4b17      	ldr	r3, [pc, #92]	; (8000c80 <HAL_RCC_OscConfig+0x274>)
 8000c24:	2201      	movs	r2, #1
 8000c26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c28:	f7ff fc56 	bl	80004d8 <HAL_GetTick>
 8000c2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c2e:	e008      	b.n	8000c42 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c30:	f7ff fc52 	bl	80004d8 <HAL_GetTick>
 8000c34:	4602      	mov	r2, r0
 8000c36:	693b      	ldr	r3, [r7, #16]
 8000c38:	1ad3      	subs	r3, r2, r3
 8000c3a:	2b02      	cmp	r3, #2
 8000c3c:	d901      	bls.n	8000c42 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000c3e:	2303      	movs	r3, #3
 8000c40:	e15a      	b.n	8000ef8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c42:	4b0d      	ldr	r3, [pc, #52]	; (8000c78 <HAL_RCC_OscConfig+0x26c>)
 8000c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c46:	f003 0302 	and.w	r3, r3, #2
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d0f0      	beq.n	8000c30 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000c4e:	2001      	movs	r0, #1
 8000c50:	f000 faa8 	bl	80011a4 <RCC_Delay>
 8000c54:	e01c      	b.n	8000c90 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000c56:	4b0a      	ldr	r3, [pc, #40]	; (8000c80 <HAL_RCC_OscConfig+0x274>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c5c:	f7ff fc3c 	bl	80004d8 <HAL_GetTick>
 8000c60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c62:	e00f      	b.n	8000c84 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c64:	f7ff fc38 	bl	80004d8 <HAL_GetTick>
 8000c68:	4602      	mov	r2, r0
 8000c6a:	693b      	ldr	r3, [r7, #16]
 8000c6c:	1ad3      	subs	r3, r2, r3
 8000c6e:	2b02      	cmp	r3, #2
 8000c70:	d908      	bls.n	8000c84 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000c72:	2303      	movs	r3, #3
 8000c74:	e140      	b.n	8000ef8 <HAL_RCC_OscConfig+0x4ec>
 8000c76:	bf00      	nop
 8000c78:	40021000 	.word	0x40021000
 8000c7c:	42420000 	.word	0x42420000
 8000c80:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c84:	4b9e      	ldr	r3, [pc, #632]	; (8000f00 <HAL_RCC_OscConfig+0x4f4>)
 8000c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c88:	f003 0302 	and.w	r3, r3, #2
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d1e9      	bne.n	8000c64 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f003 0304 	and.w	r3, r3, #4
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	f000 80a6 	beq.w	8000dea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ca2:	4b97      	ldr	r3, [pc, #604]	; (8000f00 <HAL_RCC_OscConfig+0x4f4>)
 8000ca4:	69db      	ldr	r3, [r3, #28]
 8000ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d10d      	bne.n	8000cca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000cae:	4b94      	ldr	r3, [pc, #592]	; (8000f00 <HAL_RCC_OscConfig+0x4f4>)
 8000cb0:	69db      	ldr	r3, [r3, #28]
 8000cb2:	4a93      	ldr	r2, [pc, #588]	; (8000f00 <HAL_RCC_OscConfig+0x4f4>)
 8000cb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cb8:	61d3      	str	r3, [r2, #28]
 8000cba:	4b91      	ldr	r3, [pc, #580]	; (8000f00 <HAL_RCC_OscConfig+0x4f4>)
 8000cbc:	69db      	ldr	r3, [r3, #28]
 8000cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cc2:	60bb      	str	r3, [r7, #8]
 8000cc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cca:	4b8e      	ldr	r3, [pc, #568]	; (8000f04 <HAL_RCC_OscConfig+0x4f8>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d118      	bne.n	8000d08 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000cd6:	4b8b      	ldr	r3, [pc, #556]	; (8000f04 <HAL_RCC_OscConfig+0x4f8>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4a8a      	ldr	r2, [pc, #552]	; (8000f04 <HAL_RCC_OscConfig+0x4f8>)
 8000cdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ce0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000ce2:	f7ff fbf9 	bl	80004d8 <HAL_GetTick>
 8000ce6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ce8:	e008      	b.n	8000cfc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000cea:	f7ff fbf5 	bl	80004d8 <HAL_GetTick>
 8000cee:	4602      	mov	r2, r0
 8000cf0:	693b      	ldr	r3, [r7, #16]
 8000cf2:	1ad3      	subs	r3, r2, r3
 8000cf4:	2b64      	cmp	r3, #100	; 0x64
 8000cf6:	d901      	bls.n	8000cfc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000cf8:	2303      	movs	r3, #3
 8000cfa:	e0fd      	b.n	8000ef8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cfc:	4b81      	ldr	r3, [pc, #516]	; (8000f04 <HAL_RCC_OscConfig+0x4f8>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d0f0      	beq.n	8000cea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	68db      	ldr	r3, [r3, #12]
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d106      	bne.n	8000d1e <HAL_RCC_OscConfig+0x312>
 8000d10:	4b7b      	ldr	r3, [pc, #492]	; (8000f00 <HAL_RCC_OscConfig+0x4f4>)
 8000d12:	6a1b      	ldr	r3, [r3, #32]
 8000d14:	4a7a      	ldr	r2, [pc, #488]	; (8000f00 <HAL_RCC_OscConfig+0x4f4>)
 8000d16:	f043 0301 	orr.w	r3, r3, #1
 8000d1a:	6213      	str	r3, [r2, #32]
 8000d1c:	e02d      	b.n	8000d7a <HAL_RCC_OscConfig+0x36e>
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	68db      	ldr	r3, [r3, #12]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d10c      	bne.n	8000d40 <HAL_RCC_OscConfig+0x334>
 8000d26:	4b76      	ldr	r3, [pc, #472]	; (8000f00 <HAL_RCC_OscConfig+0x4f4>)
 8000d28:	6a1b      	ldr	r3, [r3, #32]
 8000d2a:	4a75      	ldr	r2, [pc, #468]	; (8000f00 <HAL_RCC_OscConfig+0x4f4>)
 8000d2c:	f023 0301 	bic.w	r3, r3, #1
 8000d30:	6213      	str	r3, [r2, #32]
 8000d32:	4b73      	ldr	r3, [pc, #460]	; (8000f00 <HAL_RCC_OscConfig+0x4f4>)
 8000d34:	6a1b      	ldr	r3, [r3, #32]
 8000d36:	4a72      	ldr	r2, [pc, #456]	; (8000f00 <HAL_RCC_OscConfig+0x4f4>)
 8000d38:	f023 0304 	bic.w	r3, r3, #4
 8000d3c:	6213      	str	r3, [r2, #32]
 8000d3e:	e01c      	b.n	8000d7a <HAL_RCC_OscConfig+0x36e>
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	68db      	ldr	r3, [r3, #12]
 8000d44:	2b05      	cmp	r3, #5
 8000d46:	d10c      	bne.n	8000d62 <HAL_RCC_OscConfig+0x356>
 8000d48:	4b6d      	ldr	r3, [pc, #436]	; (8000f00 <HAL_RCC_OscConfig+0x4f4>)
 8000d4a:	6a1b      	ldr	r3, [r3, #32]
 8000d4c:	4a6c      	ldr	r2, [pc, #432]	; (8000f00 <HAL_RCC_OscConfig+0x4f4>)
 8000d4e:	f043 0304 	orr.w	r3, r3, #4
 8000d52:	6213      	str	r3, [r2, #32]
 8000d54:	4b6a      	ldr	r3, [pc, #424]	; (8000f00 <HAL_RCC_OscConfig+0x4f4>)
 8000d56:	6a1b      	ldr	r3, [r3, #32]
 8000d58:	4a69      	ldr	r2, [pc, #420]	; (8000f00 <HAL_RCC_OscConfig+0x4f4>)
 8000d5a:	f043 0301 	orr.w	r3, r3, #1
 8000d5e:	6213      	str	r3, [r2, #32]
 8000d60:	e00b      	b.n	8000d7a <HAL_RCC_OscConfig+0x36e>
 8000d62:	4b67      	ldr	r3, [pc, #412]	; (8000f00 <HAL_RCC_OscConfig+0x4f4>)
 8000d64:	6a1b      	ldr	r3, [r3, #32]
 8000d66:	4a66      	ldr	r2, [pc, #408]	; (8000f00 <HAL_RCC_OscConfig+0x4f4>)
 8000d68:	f023 0301 	bic.w	r3, r3, #1
 8000d6c:	6213      	str	r3, [r2, #32]
 8000d6e:	4b64      	ldr	r3, [pc, #400]	; (8000f00 <HAL_RCC_OscConfig+0x4f4>)
 8000d70:	6a1b      	ldr	r3, [r3, #32]
 8000d72:	4a63      	ldr	r2, [pc, #396]	; (8000f00 <HAL_RCC_OscConfig+0x4f4>)
 8000d74:	f023 0304 	bic.w	r3, r3, #4
 8000d78:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	68db      	ldr	r3, [r3, #12]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d015      	beq.n	8000dae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d82:	f7ff fba9 	bl	80004d8 <HAL_GetTick>
 8000d86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d88:	e00a      	b.n	8000da0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d8a:	f7ff fba5 	bl	80004d8 <HAL_GetTick>
 8000d8e:	4602      	mov	r2, r0
 8000d90:	693b      	ldr	r3, [r7, #16]
 8000d92:	1ad3      	subs	r3, r2, r3
 8000d94:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d901      	bls.n	8000da0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000d9c:	2303      	movs	r3, #3
 8000d9e:	e0ab      	b.n	8000ef8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000da0:	4b57      	ldr	r3, [pc, #348]	; (8000f00 <HAL_RCC_OscConfig+0x4f4>)
 8000da2:	6a1b      	ldr	r3, [r3, #32]
 8000da4:	f003 0302 	and.w	r3, r3, #2
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d0ee      	beq.n	8000d8a <HAL_RCC_OscConfig+0x37e>
 8000dac:	e014      	b.n	8000dd8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dae:	f7ff fb93 	bl	80004d8 <HAL_GetTick>
 8000db2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000db4:	e00a      	b.n	8000dcc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000db6:	f7ff fb8f 	bl	80004d8 <HAL_GetTick>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	693b      	ldr	r3, [r7, #16]
 8000dbe:	1ad3      	subs	r3, r2, r3
 8000dc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d901      	bls.n	8000dcc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000dc8:	2303      	movs	r3, #3
 8000dca:	e095      	b.n	8000ef8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000dcc:	4b4c      	ldr	r3, [pc, #304]	; (8000f00 <HAL_RCC_OscConfig+0x4f4>)
 8000dce:	6a1b      	ldr	r3, [r3, #32]
 8000dd0:	f003 0302 	and.w	r3, r3, #2
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d1ee      	bne.n	8000db6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000dd8:	7dfb      	ldrb	r3, [r7, #23]
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d105      	bne.n	8000dea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000dde:	4b48      	ldr	r3, [pc, #288]	; (8000f00 <HAL_RCC_OscConfig+0x4f4>)
 8000de0:	69db      	ldr	r3, [r3, #28]
 8000de2:	4a47      	ldr	r2, [pc, #284]	; (8000f00 <HAL_RCC_OscConfig+0x4f4>)
 8000de4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000de8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	69db      	ldr	r3, [r3, #28]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	f000 8081 	beq.w	8000ef6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000df4:	4b42      	ldr	r3, [pc, #264]	; (8000f00 <HAL_RCC_OscConfig+0x4f4>)
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f003 030c 	and.w	r3, r3, #12
 8000dfc:	2b08      	cmp	r3, #8
 8000dfe:	d061      	beq.n	8000ec4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	69db      	ldr	r3, [r3, #28]
 8000e04:	2b02      	cmp	r3, #2
 8000e06:	d146      	bne.n	8000e96 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e08:	4b3f      	ldr	r3, [pc, #252]	; (8000f08 <HAL_RCC_OscConfig+0x4fc>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e0e:	f7ff fb63 	bl	80004d8 <HAL_GetTick>
 8000e12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e14:	e008      	b.n	8000e28 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e16:	f7ff fb5f 	bl	80004d8 <HAL_GetTick>
 8000e1a:	4602      	mov	r2, r0
 8000e1c:	693b      	ldr	r3, [r7, #16]
 8000e1e:	1ad3      	subs	r3, r2, r3
 8000e20:	2b02      	cmp	r3, #2
 8000e22:	d901      	bls.n	8000e28 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000e24:	2303      	movs	r3, #3
 8000e26:	e067      	b.n	8000ef8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e28:	4b35      	ldr	r3, [pc, #212]	; (8000f00 <HAL_RCC_OscConfig+0x4f4>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d1f0      	bne.n	8000e16 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6a1b      	ldr	r3, [r3, #32]
 8000e38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e3c:	d108      	bne.n	8000e50 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000e3e:	4b30      	ldr	r3, [pc, #192]	; (8000f00 <HAL_RCC_OscConfig+0x4f4>)
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	689b      	ldr	r3, [r3, #8]
 8000e4a:	492d      	ldr	r1, [pc, #180]	; (8000f00 <HAL_RCC_OscConfig+0x4f4>)
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e50:	4b2b      	ldr	r3, [pc, #172]	; (8000f00 <HAL_RCC_OscConfig+0x4f4>)
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6a19      	ldr	r1, [r3, #32]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e60:	430b      	orrs	r3, r1
 8000e62:	4927      	ldr	r1, [pc, #156]	; (8000f00 <HAL_RCC_OscConfig+0x4f4>)
 8000e64:	4313      	orrs	r3, r2
 8000e66:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000e68:	4b27      	ldr	r3, [pc, #156]	; (8000f08 <HAL_RCC_OscConfig+0x4fc>)
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e6e:	f7ff fb33 	bl	80004d8 <HAL_GetTick>
 8000e72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e74:	e008      	b.n	8000e88 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e76:	f7ff fb2f 	bl	80004d8 <HAL_GetTick>
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	1ad3      	subs	r3, r2, r3
 8000e80:	2b02      	cmp	r3, #2
 8000e82:	d901      	bls.n	8000e88 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000e84:	2303      	movs	r3, #3
 8000e86:	e037      	b.n	8000ef8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e88:	4b1d      	ldr	r3, [pc, #116]	; (8000f00 <HAL_RCC_OscConfig+0x4f4>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d0f0      	beq.n	8000e76 <HAL_RCC_OscConfig+0x46a>
 8000e94:	e02f      	b.n	8000ef6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e96:	4b1c      	ldr	r3, [pc, #112]	; (8000f08 <HAL_RCC_OscConfig+0x4fc>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e9c:	f7ff fb1c 	bl	80004d8 <HAL_GetTick>
 8000ea0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ea2:	e008      	b.n	8000eb6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ea4:	f7ff fb18 	bl	80004d8 <HAL_GetTick>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	1ad3      	subs	r3, r2, r3
 8000eae:	2b02      	cmp	r3, #2
 8000eb0:	d901      	bls.n	8000eb6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000eb2:	2303      	movs	r3, #3
 8000eb4:	e020      	b.n	8000ef8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000eb6:	4b12      	ldr	r3, [pc, #72]	; (8000f00 <HAL_RCC_OscConfig+0x4f4>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d1f0      	bne.n	8000ea4 <HAL_RCC_OscConfig+0x498>
 8000ec2:	e018      	b.n	8000ef6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	69db      	ldr	r3, [r3, #28]
 8000ec8:	2b01      	cmp	r3, #1
 8000eca:	d101      	bne.n	8000ed0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	e013      	b.n	8000ef8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000ed0:	4b0b      	ldr	r3, [pc, #44]	; (8000f00 <HAL_RCC_OscConfig+0x4f4>)
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6a1b      	ldr	r3, [r3, #32]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d106      	bne.n	8000ef2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	d001      	beq.n	8000ef6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e000      	b.n	8000ef8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8000ef6:	2300      	movs	r3, #0
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3718      	adds	r7, #24
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	40021000 	.word	0x40021000
 8000f04:	40007000 	.word	0x40007000
 8000f08:	42420060 	.word	0x42420060

08000f0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d101      	bne.n	8000f20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	e0d0      	b.n	80010c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000f20:	4b6a      	ldr	r3, [pc, #424]	; (80010cc <HAL_RCC_ClockConfig+0x1c0>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f003 0307 	and.w	r3, r3, #7
 8000f28:	683a      	ldr	r2, [r7, #0]
 8000f2a:	429a      	cmp	r2, r3
 8000f2c:	d910      	bls.n	8000f50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f2e:	4b67      	ldr	r3, [pc, #412]	; (80010cc <HAL_RCC_ClockConfig+0x1c0>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f023 0207 	bic.w	r2, r3, #7
 8000f36:	4965      	ldr	r1, [pc, #404]	; (80010cc <HAL_RCC_ClockConfig+0x1c0>)
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f3e:	4b63      	ldr	r3, [pc, #396]	; (80010cc <HAL_RCC_ClockConfig+0x1c0>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f003 0307 	and.w	r3, r3, #7
 8000f46:	683a      	ldr	r2, [r7, #0]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	d001      	beq.n	8000f50 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	e0b8      	b.n	80010c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f003 0302 	and.w	r3, r3, #2
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d020      	beq.n	8000f9e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f003 0304 	and.w	r3, r3, #4
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d005      	beq.n	8000f74 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000f68:	4b59      	ldr	r3, [pc, #356]	; (80010d0 <HAL_RCC_ClockConfig+0x1c4>)
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	4a58      	ldr	r2, [pc, #352]	; (80010d0 <HAL_RCC_ClockConfig+0x1c4>)
 8000f6e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000f72:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f003 0308 	and.w	r3, r3, #8
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d005      	beq.n	8000f8c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000f80:	4b53      	ldr	r3, [pc, #332]	; (80010d0 <HAL_RCC_ClockConfig+0x1c4>)
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	4a52      	ldr	r2, [pc, #328]	; (80010d0 <HAL_RCC_ClockConfig+0x1c4>)
 8000f86:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000f8a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f8c:	4b50      	ldr	r3, [pc, #320]	; (80010d0 <HAL_RCC_ClockConfig+0x1c4>)
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	689b      	ldr	r3, [r3, #8]
 8000f98:	494d      	ldr	r1, [pc, #308]	; (80010d0 <HAL_RCC_ClockConfig+0x1c4>)
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f003 0301 	and.w	r3, r3, #1
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d040      	beq.n	800102c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d107      	bne.n	8000fc2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fb2:	4b47      	ldr	r3, [pc, #284]	; (80010d0 <HAL_RCC_ClockConfig+0x1c4>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d115      	bne.n	8000fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e07f      	b.n	80010c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	2b02      	cmp	r3, #2
 8000fc8:	d107      	bne.n	8000fda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fca:	4b41      	ldr	r3, [pc, #260]	; (80010d0 <HAL_RCC_ClockConfig+0x1c4>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d109      	bne.n	8000fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e073      	b.n	80010c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fda:	4b3d      	ldr	r3, [pc, #244]	; (80010d0 <HAL_RCC_ClockConfig+0x1c4>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f003 0302 	and.w	r3, r3, #2
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d101      	bne.n	8000fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e06b      	b.n	80010c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000fea:	4b39      	ldr	r3, [pc, #228]	; (80010d0 <HAL_RCC_ClockConfig+0x1c4>)
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f023 0203 	bic.w	r2, r3, #3
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	4936      	ldr	r1, [pc, #216]	; (80010d0 <HAL_RCC_ClockConfig+0x1c4>)
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000ffc:	f7ff fa6c 	bl	80004d8 <HAL_GetTick>
 8001000:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001002:	e00a      	b.n	800101a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001004:	f7ff fa68 	bl	80004d8 <HAL_GetTick>
 8001008:	4602      	mov	r2, r0
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001012:	4293      	cmp	r3, r2
 8001014:	d901      	bls.n	800101a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001016:	2303      	movs	r3, #3
 8001018:	e053      	b.n	80010c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800101a:	4b2d      	ldr	r3, [pc, #180]	; (80010d0 <HAL_RCC_ClockConfig+0x1c4>)
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	f003 020c 	and.w	r2, r3, #12
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	429a      	cmp	r2, r3
 800102a:	d1eb      	bne.n	8001004 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800102c:	4b27      	ldr	r3, [pc, #156]	; (80010cc <HAL_RCC_ClockConfig+0x1c0>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f003 0307 	and.w	r3, r3, #7
 8001034:	683a      	ldr	r2, [r7, #0]
 8001036:	429a      	cmp	r2, r3
 8001038:	d210      	bcs.n	800105c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800103a:	4b24      	ldr	r3, [pc, #144]	; (80010cc <HAL_RCC_ClockConfig+0x1c0>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f023 0207 	bic.w	r2, r3, #7
 8001042:	4922      	ldr	r1, [pc, #136]	; (80010cc <HAL_RCC_ClockConfig+0x1c0>)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	4313      	orrs	r3, r2
 8001048:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800104a:	4b20      	ldr	r3, [pc, #128]	; (80010cc <HAL_RCC_ClockConfig+0x1c0>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f003 0307 	and.w	r3, r3, #7
 8001052:	683a      	ldr	r2, [r7, #0]
 8001054:	429a      	cmp	r2, r3
 8001056:	d001      	beq.n	800105c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001058:	2301      	movs	r3, #1
 800105a:	e032      	b.n	80010c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f003 0304 	and.w	r3, r3, #4
 8001064:	2b00      	cmp	r3, #0
 8001066:	d008      	beq.n	800107a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001068:	4b19      	ldr	r3, [pc, #100]	; (80010d0 <HAL_RCC_ClockConfig+0x1c4>)
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	4916      	ldr	r1, [pc, #88]	; (80010d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001076:	4313      	orrs	r3, r2
 8001078:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f003 0308 	and.w	r3, r3, #8
 8001082:	2b00      	cmp	r3, #0
 8001084:	d009      	beq.n	800109a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001086:	4b12      	ldr	r3, [pc, #72]	; (80010d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	691b      	ldr	r3, [r3, #16]
 8001092:	00db      	lsls	r3, r3, #3
 8001094:	490e      	ldr	r1, [pc, #56]	; (80010d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001096:	4313      	orrs	r3, r2
 8001098:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800109a:	f000 f821 	bl	80010e0 <HAL_RCC_GetSysClockFreq>
 800109e:	4601      	mov	r1, r0
 80010a0:	4b0b      	ldr	r3, [pc, #44]	; (80010d0 <HAL_RCC_ClockConfig+0x1c4>)
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	091b      	lsrs	r3, r3, #4
 80010a6:	f003 030f 	and.w	r3, r3, #15
 80010aa:	4a0a      	ldr	r2, [pc, #40]	; (80010d4 <HAL_RCC_ClockConfig+0x1c8>)
 80010ac:	5cd3      	ldrb	r3, [r2, r3]
 80010ae:	fa21 f303 	lsr.w	r3, r1, r3
 80010b2:	4a09      	ldr	r2, [pc, #36]	; (80010d8 <HAL_RCC_ClockConfig+0x1cc>)
 80010b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80010b6:	4b09      	ldr	r3, [pc, #36]	; (80010dc <HAL_RCC_ClockConfig+0x1d0>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff f9ca 	bl	8000454 <HAL_InitTick>

  return HAL_OK;
 80010c0:	2300      	movs	r3, #0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3710      	adds	r7, #16
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40022000 	.word	0x40022000
 80010d0:	40021000 	.word	0x40021000
 80010d4:	08001264 	.word	0x08001264
 80010d8:	20000000 	.word	0x20000000
 80010dc:	20000004 	.word	0x20000004

080010e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80010e0:	b490      	push	{r4, r7}
 80010e2:	b08a      	sub	sp, #40	; 0x28
 80010e4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80010e6:	4b2a      	ldr	r3, [pc, #168]	; (8001190 <HAL_RCC_GetSysClockFreq+0xb0>)
 80010e8:	1d3c      	adds	r4, r7, #4
 80010ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80010f0:	4b28      	ldr	r3, [pc, #160]	; (8001194 <HAL_RCC_GetSysClockFreq+0xb4>)
 80010f2:	881b      	ldrh	r3, [r3, #0]
 80010f4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80010f6:	2300      	movs	r3, #0
 80010f8:	61fb      	str	r3, [r7, #28]
 80010fa:	2300      	movs	r3, #0
 80010fc:	61bb      	str	r3, [r7, #24]
 80010fe:	2300      	movs	r3, #0
 8001100:	627b      	str	r3, [r7, #36]	; 0x24
 8001102:	2300      	movs	r3, #0
 8001104:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001106:	2300      	movs	r3, #0
 8001108:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800110a:	4b23      	ldr	r3, [pc, #140]	; (8001198 <HAL_RCC_GetSysClockFreq+0xb8>)
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	f003 030c 	and.w	r3, r3, #12
 8001116:	2b04      	cmp	r3, #4
 8001118:	d002      	beq.n	8001120 <HAL_RCC_GetSysClockFreq+0x40>
 800111a:	2b08      	cmp	r3, #8
 800111c:	d003      	beq.n	8001126 <HAL_RCC_GetSysClockFreq+0x46>
 800111e:	e02d      	b.n	800117c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001120:	4b1e      	ldr	r3, [pc, #120]	; (800119c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001122:	623b      	str	r3, [r7, #32]
      break;
 8001124:	e02d      	b.n	8001182 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	0c9b      	lsrs	r3, r3, #18
 800112a:	f003 030f 	and.w	r3, r3, #15
 800112e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001132:	4413      	add	r3, r2
 8001134:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001138:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001140:	2b00      	cmp	r3, #0
 8001142:	d013      	beq.n	800116c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001144:	4b14      	ldr	r3, [pc, #80]	; (8001198 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	0c5b      	lsrs	r3, r3, #17
 800114a:	f003 0301 	and.w	r3, r3, #1
 800114e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001152:	4413      	add	r3, r2
 8001154:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001158:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	4a0f      	ldr	r2, [pc, #60]	; (800119c <HAL_RCC_GetSysClockFreq+0xbc>)
 800115e:	fb02 f203 	mul.w	r2, r2, r3
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	fbb2 f3f3 	udiv	r3, r2, r3
 8001168:	627b      	str	r3, [r7, #36]	; 0x24
 800116a:	e004      	b.n	8001176 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	4a0c      	ldr	r2, [pc, #48]	; (80011a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001170:	fb02 f303 	mul.w	r3, r2, r3
 8001174:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001178:	623b      	str	r3, [r7, #32]
      break;
 800117a:	e002      	b.n	8001182 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800117c:	4b07      	ldr	r3, [pc, #28]	; (800119c <HAL_RCC_GetSysClockFreq+0xbc>)
 800117e:	623b      	str	r3, [r7, #32]
      break;
 8001180:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001182:	6a3b      	ldr	r3, [r7, #32]
}
 8001184:	4618      	mov	r0, r3
 8001186:	3728      	adds	r7, #40	; 0x28
 8001188:	46bd      	mov	sp, r7
 800118a:	bc90      	pop	{r4, r7}
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	08001250 	.word	0x08001250
 8001194:	08001260 	.word	0x08001260
 8001198:	40021000 	.word	0x40021000
 800119c:	007a1200 	.word	0x007a1200
 80011a0:	003d0900 	.word	0x003d0900

080011a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b085      	sub	sp, #20
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80011ac:	4b0a      	ldr	r3, [pc, #40]	; (80011d8 <RCC_Delay+0x34>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a0a      	ldr	r2, [pc, #40]	; (80011dc <RCC_Delay+0x38>)
 80011b2:	fba2 2303 	umull	r2, r3, r2, r3
 80011b6:	0a5b      	lsrs	r3, r3, #9
 80011b8:	687a      	ldr	r2, [r7, #4]
 80011ba:	fb02 f303 	mul.w	r3, r2, r3
 80011be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80011c0:	bf00      	nop
  }
  while (Delay --);
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	1e5a      	subs	r2, r3, #1
 80011c6:	60fa      	str	r2, [r7, #12]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d1f9      	bne.n	80011c0 <RCC_Delay+0x1c>
}
 80011cc:	bf00      	nop
 80011ce:	3714      	adds	r7, #20
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bc80      	pop	{r7}
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	20000000 	.word	0x20000000
 80011dc:	10624dd3 	.word	0x10624dd3

080011e0 <__libc_init_array>:
 80011e0:	b570      	push	{r4, r5, r6, lr}
 80011e2:	2500      	movs	r5, #0
 80011e4:	4e0c      	ldr	r6, [pc, #48]	; (8001218 <__libc_init_array+0x38>)
 80011e6:	4c0d      	ldr	r4, [pc, #52]	; (800121c <__libc_init_array+0x3c>)
 80011e8:	1ba4      	subs	r4, r4, r6
 80011ea:	10a4      	asrs	r4, r4, #2
 80011ec:	42a5      	cmp	r5, r4
 80011ee:	d109      	bne.n	8001204 <__libc_init_array+0x24>
 80011f0:	f000 f822 	bl	8001238 <_init>
 80011f4:	2500      	movs	r5, #0
 80011f6:	4e0a      	ldr	r6, [pc, #40]	; (8001220 <__libc_init_array+0x40>)
 80011f8:	4c0a      	ldr	r4, [pc, #40]	; (8001224 <__libc_init_array+0x44>)
 80011fa:	1ba4      	subs	r4, r4, r6
 80011fc:	10a4      	asrs	r4, r4, #2
 80011fe:	42a5      	cmp	r5, r4
 8001200:	d105      	bne.n	800120e <__libc_init_array+0x2e>
 8001202:	bd70      	pop	{r4, r5, r6, pc}
 8001204:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001208:	4798      	blx	r3
 800120a:	3501      	adds	r5, #1
 800120c:	e7ee      	b.n	80011ec <__libc_init_array+0xc>
 800120e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001212:	4798      	blx	r3
 8001214:	3501      	adds	r5, #1
 8001216:	e7f2      	b.n	80011fe <__libc_init_array+0x1e>
 8001218:	08001274 	.word	0x08001274
 800121c:	08001274 	.word	0x08001274
 8001220:	08001274 	.word	0x08001274
 8001224:	08001278 	.word	0x08001278

08001228 <memset>:
 8001228:	4603      	mov	r3, r0
 800122a:	4402      	add	r2, r0
 800122c:	4293      	cmp	r3, r2
 800122e:	d100      	bne.n	8001232 <memset+0xa>
 8001230:	4770      	bx	lr
 8001232:	f803 1b01 	strb.w	r1, [r3], #1
 8001236:	e7f9      	b.n	800122c <memset+0x4>

08001238 <_init>:
 8001238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800123a:	bf00      	nop
 800123c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800123e:	bc08      	pop	{r3}
 8001240:	469e      	mov	lr, r3
 8001242:	4770      	bx	lr

08001244 <_fini>:
 8001244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001246:	bf00      	nop
 8001248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800124a:	bc08      	pop	{r3}
 800124c:	469e      	mov	lr, r3
 800124e:	4770      	bx	lr
